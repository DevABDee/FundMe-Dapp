{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.5;\r\n\r\nimport \"./PriceConverter.sol\";\r\n\r\ncontract FundMe {\r\n    error NotOwner();\r\n\r\n    using PriceConverter for uint;\r\n\r\n    address[] public funders;\r\n\r\n    mapping(address => uint) public amountFunded;\r\n\r\n    uint public constant MINIMUM_USD = 50 * 10**18;\r\n\r\n    address public immutable ContractOwner;\r\n\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        ContractOwner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    function Fund() public payable {\r\n        require(\r\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\r\n            \"Unsuficient Amount\"\r\n        );\r\n        funders.push(msg.sender);\r\n        amountFunded[msg.sender] = msg.value;\r\n    }\r\n\r\n    // function Fund() payable public {\r\n    //     require(msg.value >= 50, \"Unsuficient Amount\");\r\n    //     funders.push(msg.sender);\r\n    //     amountFunded[msg.sender] = msg.value;\r\n    // }\r\n\r\n    function Balance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function Withdraw() public contractOwnerOnly {\r\n        for (uint i; i < funders.length; i++) {\r\n            address funder = funders[i];\r\n            amountFunded[funder] = 0;\r\n        }\r\n        funders = new address[](0);\r\n\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(success, \"Transaction Failed\");\r\n    }\r\n\r\n    modifier contractOwnerOnly() {\r\n        // require(msg.sender == ContractOwner, \"Chor! Chor! Chor!\");\r\n        if (msg.sender != ContractOwner) {\r\n            revert NotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n        Fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        Fund();\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.5;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint)\r\n    {\r\n        (, int price, , , ) = priceFeed.latestRoundData();\r\n        return uint(price * 1e10);\r\n        //ETH in USD\r\n    }\r\n\r\n    function getConversionRate(uint ethAmount, AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint ethPrice = getPrice(priceFeed);\r\n        uint ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}